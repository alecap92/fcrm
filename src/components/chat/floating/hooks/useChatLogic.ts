import { useState, useCallback, useEffect } from "react";
import { Message } from "../types";
import { useChatContext } from "../context/ChatContext";
import { ChatResponseService } from "../services/ChatResponseService";
import { GPTService } from "../services/GPTService";
import { KeywordDetectionService } from "../services/KeywordDetectionService";

const INITIAL_MESSAGES: Message[] = [
  // {
  //   id: "1",
  //   content:
  //     "¬°Hola! Soy tu asistente de FusionCRM. ¬øEn qu√© puedo ayudarte hoy?",
  //   sender: "assistant",
  //   timestamp: new Date(),
  // },
  // {
  //   id: "2",
  //   content:
  //     "Puedo ayudarte con informaci√≥n sobre la organizaci√≥n, tutoriales, consejos y responder preguntas sobre el CRM.",
  //   sender: "assistant",
  //   timestamp: new Date(),
  //   buttons: [
  //     {
  //       id: "initial-1",
  //       text: "Ver tutoriales",
  //       type: "action",
  //       variant: "secondary",
  //     },
  //     {
  //       id: "initial-3",
  //       text: "Preguntar a GPT",
  //       type: "gpt",
  //       variant: "primary",
  //     },
  //   ],
  // },
];

const SAMPLE_RESPONSES = [
  "Gracias por tu mensaje. Esta es una respuesta de ejemplo. Pronto estar√© conectado con IA para brindarte respuestas m√°s inteligentes.",
  "¬°Excelente pregunta! Estoy aqu√≠ para ayudarte con cualquier duda sobre FusionCRM.",
  "Entiendo tu consulta. En el futuro podr√© brindarte respuestas m√°s espec√≠ficas y √∫tiles.",
  "Perfecto, estoy procesando tu solicitud. Pronto tendr√© capacidades de IA m√°s avanzadas.",
];

// Helper function para obtener el nombre del mes actual
const getCurrentMonthName = () => {
  const months = [
    "Enero",
    "Febrero",
    "Marzo",
    "Abril",
    "Mayo",
    "Junio",
    "Julio",
    "Agosto",
    "Septiembre",
    "Octubre",
    "Noviembre",
    "Diciembre",
  ];
  return months[new Date().getMonth()];
};

// Helper function para obtener el nombre del mes anterior
const getPreviousMonthName = () => {
  const months = [
    "Enero",
    "Febrero",
    "Marzo",
    "Abril",
    "Mayo",
    "Junio",
    "Julio",
    "Agosto",
    "Septiembre",
    "Octubre",
    "Noviembre",
    "Diciembre",
  ];
  const previousMonth = new Date().getMonth() - 1;
  const monthIndex = previousMonth < 0 ? 11 : previousMonth;
  return months[monthIndex];
};

// Helper function para obtener el a√±o anterior si es necesario
const getPreviousYearIfNeeded = () => {
  const currentDate = new Date();
  const previousMonth = currentDate.getMonth() - 1;
  return previousMonth < 0
    ? currentDate.getFullYear() - 1
    : currentDate.getFullYear();
};

export const useChatLogic = () => {
  const [messages, setMessages] = useState<Message[]>(INITIAL_MESSAGES);
  const [isTyping, setIsTyping] = useState(false);
  const [showTextInput, setShowTextInput] = useState(false);
  const [awaitingGptResponse, setAwaitingGptResponse] = useState(false);
  const {
    contextData,
    sendContextualMessage,
    registerMessageHandler,
    unregisterMessageHandler,
  } = useChatContext();

  const addMessage = useCallback(
    (
      content: string,
      sender: "user" | "assistant",
      buttons?: any[],
      options?: { variant?: "default" | "warning" | "info"; icon?: string }
    ) => {
      const newMessage: Message = {
        id: Date.now().toString(),
        content,
        sender,
        timestamp: new Date(),
        buttons,
        ...options,
      };
      setMessages((prev) => [...prev, newMessage]);
      return newMessage;
    },
    []
  );

  // Registrar el handler de mensajes al montar el componente
  useEffect(() => {
    const messageHandler = async (
      content: string,
      sender: "user" | "assistant",
      buttons?: any[],
      options?: { variant?: "default" | "warning" | "info"; icon?: string }
    ) => {
      addMessage(content, sender, buttons, options);
    };
    registerMessageHandler(messageHandler);
    return () => {
      unregisterMessageHandler();
    };
  }, [addMessage, registerMessageHandler, unregisterMessageHandler]);

  const sendMessage = useCallback(
    async (content: string) => {
      // Agregar mensaje del usuario
      addMessage(content, "user");
      setIsTyping(true);

      try {
        // 1. Detectar intenci√≥n del mensaje
        const detectedIntent = KeywordDetectionService.detectIntent(content);
        const shouldUseGPT = KeywordDetectionService.shouldActivateGPT(content);

        // 2. Si el usuario quiere GPT espec√≠ficamente o ya estamos en modo GPT
        if (
          shouldUseGPT ||
          awaitingGptResponse // Si estamos esperando respuesta de GPT, enviar cualquier mensaje a GPT
        ) {
          try {
            // Activar modo GPT si no estaba activo
            if (!awaitingGptResponse) {
              setAwaitingGptResponse(true);
              setShowTextInput(true);
            }

            // Si el mensaje es muy corto y estamos en modo GPT, pedir m√°s detalles
            if (awaitingGptResponse && content.length <= 2) {
              addMessage(
                "Tu mensaje es muy corto. ¬øPodr√≠as darme m√°s detalles sobre lo que necesitas? Por ejemplo, puedes preguntar sobre estrategias, an√°lisis, o cualquier tema espec√≠fico.",
                "assistant",
                [
                  {
                    id: "gpt-continue",
                    text: "Continuar con GPT",
                    type: "gpt",
                    variant: "primary",
                  },
                ],
                { variant: "warning" }
              );
              setIsTyping(false);
              return;
            }

            const gptResponse = await GPTService.sendMessage({
              message: content,
              context: contextData || undefined,
            });

            addMessage(
              gptResponse.content,
              "assistant",
              [
                {
                  id: "gpt-follow-up",
                  text: "Preguntar algo m√°s a GPT",
                  type: "gpt",
                  variant: "primary",
                },
              ],
              { variant: "info", icon: "ü§ñ" }
            );
            setAwaitingGptResponse(false);
          } catch (error) {
            console.error("Error with GPT:", error);
            addMessage(
              "Lo siento, no pude conectar con GPT en este momento. Sin embargo, puedo ayudarte con informaci√≥n b√°sica. ¬øQu√© necesitas saber?",
              "assistant",
              [
                {
                  id: "gpt-retry",
                  text: "Intentar GPT de nuevo",
                  type: "gpt",
                  variant: "primary",
                },
                {
                  id: "help-basic",
                  text: "Ayuda b√°sica",
                  type: "action",
                  variant: "secondary",
                },
              ],
              { variant: "warning", icon: "‚ùå" }
            );
            setAwaitingGptResponse(false);
          }
        }
        // 3. Si se detect√≥ una intenci√≥n espec√≠fica, responder seg√∫n la intenci√≥n
        else if (detectedIntent) {
          setTimeout(() => {
            let responseContent = "";
            let buttons: any[] = [];

            switch (detectedIntent.action) {
              case "menu":
                responseContent = "Aqu√≠ tienes las opciones principales:";
                buttons = [
                  {
                    id: "general-1",
                    text: "Ver tutoriales",
                    type: "action",
                    variant: "secondary",
                  },
                  {
                    id: "general-2",
                    text: "Mejores pr√°cticas",
                    type: "action",
                    variant: "secondary",
                  },
                  {
                    id: "general-3",
                    text: "Preguntar a GPT",
                    type: "gpt",
                    variant: "primary",
                  },
                ];
                break;

              case "response":
                // Usar el servicio de respuestas contextual para respuestas espec√≠ficas
                const contextualResponse = ChatResponseService.generateResponse(
                  content,
                  contextData
                );
                responseContent = contextualResponse.content;
                buttons = contextualResponse.buttons || [];
                break;

              default:
                // Respuesta sugerida basada en la intenci√≥n
                const suggestedResponse =
                  KeywordDetectionService.getSuggestedResponse(
                    detectedIntent.intent,
                    content
                  );
                responseContent =
                  suggestedResponse ||
                  "Entiendo tu consulta. ¬øPodr√≠as ser m√°s espec√≠fico?";
                buttons = [
                  {
                    id: "help-gpt",
                    text: "Preguntar a GPT",
                    type: "gpt",
                    variant: "primary",
                  },
                ];
            }

            addMessage(responseContent, "assistant", buttons, {
              variant: "info",
              icon: "üí°",
            });
            setIsTyping(false);
          }, 800 + Math.random() * 400);
        }
        // 4. Si no se detect√≥ intenci√≥n espec√≠fica, usar respuesta contextual
        else {
          setTimeout(() => {
            const response = ChatResponseService.generateResponse(
              content,
              contextData
            );
            addMessage(response.content, "assistant", response.buttons);
            setIsTyping(false);
          }, 1000 + Math.random() * 1000);
        }

        setIsTyping(false);
        setShowTextInput(false); // Ocultar input despu√©s de respuesta

        // Llamar funci√≥n contextual si existe
        sendContextualMessage(content);
      } catch (error) {
        console.error("Error sending message:", error);
        addMessage(
          "Lo siento, hubo un error procesando tu mensaje.",
          "assistant"
        );
        setIsTyping(false);
      }
    },
    [addMessage, contextData, sendContextualMessage, awaitingGptResponse]
  );

  const clearMessages = useCallback(() => {
    setMessages(INITIAL_MESSAGES);
    setIsTyping(false);
    setShowTextInput(false);
    setAwaitingGptResponse(false);
  }, [addMessage]);

  const handleButtonClick = useCallback(
    async (button: any) => {
      // Primero agregar el mensaje del usuario con el texto del bot√≥n
      addMessage(button.text, "user");

      if (button.type === "gpt") {
        // Habilitar input para preguntar a GPT
        setShowTextInput(true);
        setAwaitingGptResponse(true);

        // Agregar mensaje indicando que puede escribir
        addMessage(
          "Perfecto, ahora puedes escribir tu pregunta espec√≠fica y la enviar√© a GPT para obtener una respuesta m√°s detallada. Por favor, s√© espec√≠fico en tu consulta.",
          "assistant"
        );
      } else if (button.type === "action") {
        // Ejecutar acci√≥n predefinida
        if (button.action) {
          button.action();
        } else {
          // Simular respuesta para acciones predefinidas
          await handleActionButton(button);
        }
      } else if (button.type === "suggestion") {
        // Tratar como mensaje normal
        sendMessage(button.text);
      }
    },
    [addMessage, sendMessage]
  );

  const handleActionButton = useCallback(
    async (button: any) => {
      setIsTyping(true);

      setTimeout(async () => {
        let responseContent = "";

        // Respuestas espec√≠ficas por ID de bot√≥n
        switch (button.id) {
          case "deals-tutorial":
            addMessage(
              "üìö ¬°Perfecto! Te explico c√≥mo funcionan los deals.",
              "assistant"
            );

            setTimeout(() => {
              addMessage(
                "En los deals, puedes crear las oportunidades de venta de tu empresa. Puedes personalizar cada etapa e inclusive puedes crear varios Pipelines o flujos de venta.",
                "assistant"
              );
            }, 1000);

            setTimeout(() => {
              addMessage(
                "Por ejemplo, si vendes camisetas, puedes crear un Pipeline para cada color de camiseta. ¬øTe gustar√≠a que te muestre c√≥mo crear tu primer deal?",
                "assistant",
                []
              );
            }, 2500);

            setIsTyping(false);
            return;

          case "deals-monthly-sales":
            console.log("üîç Verificando contextData:", contextData);
            console.log(
              "üîç getDealsStats existe:",
              !!contextData?.getDealsStats
            );

            if (contextData?.getDealsStats) {
              try {
                console.log("üìä Llamando getDealsStats con period: current");
                const stats = await contextData.getDealsStats("current");
                console.log("üìä Estad√≠sticas recibidas:", stats);

                if (stats) {
                  responseContent =
                    `üí∞ **Reporte de ${stats.month} ${stats.year}**\n\n` +
                    `üìä **Deals totales:** ${stats.totalDeals}\n` +
                    `üíµ **Valor total:** $${stats.totalAmount.toLocaleString()}\n` +
                    `‚úÖ **Deals cerrados:** ${stats.closedDeals}\n` +
                    `üéØ **Ventas cerradas:** $${stats.closedAmount.toLocaleString()}\n` +
                    `üìà **Promedio por deal:** $${stats.averageAmount.toLocaleString()}\n` +
                    `üéØ **Tasa de conversi√≥n:** ${stats.conversionRate}%`;
                } else {
                  responseContent = `üìä No hay datos de deals disponibles para ${getCurrentMonthName()} ${new Date().getFullYear()}.`;
                }
              } catch (error) {
                console.error("Error obteniendo estad√≠sticas:", error);
                responseContent =
                  "‚ùå Error al obtener las estad√≠sticas de deals.";
              }
            } else {
              console.log("‚ùå getDealsStats no est√° disponible en contextData");
              responseContent =
                "‚ùå No hay datos de deals disponibles en este momento.";
            }
            break;

          case "deals-previous-sales":
            if (contextData?.getDealsStats) {
              try {
                const stats = await contextData.getDealsStats("previous");
                if (stats) {
                  responseContent =
                    `üìÖ **Reporte de ${stats.month} ${stats.year}**\n\n` +
                    `üìä **Deals totales:** ${stats.totalDeals}\n` +
                    `üíµ **Valor total:** $${stats.totalAmount.toLocaleString()}\n` +
                    `‚úÖ **Deals cerrados:** ${stats.closedDeals}\n` +
                    `üéØ **Ventas cerradas:** $${stats.closedAmount.toLocaleString()}\n` +
                    `üìà **Promedio por deal:** $${stats.averageAmount.toLocaleString()}\n` +
                    `üéØ **Tasa de conversi√≥n:** ${stats.conversionRate}%`;
                } else {
                  responseContent = `üìä No hay datos de deals disponibles para ${getPreviousMonthName()} ${getPreviousYearIfNeeded()}.`;
                }
              } catch (error) {
                console.error("Error obteniendo estad√≠sticas:", error);
                responseContent =
                  "‚ùå Error al obtener las estad√≠sticas de deals.";
              }
            } else {
              responseContent =
                "‚ùå No hay datos de deals disponibles en este momento.";
            }
            break;
          case "deals-products-sold":
            console.log(
              "üîç Verificando contextData para productos:",
              contextData
            );
            console.log(
              "üîç getTopSellingProducts existe:",
              !!contextData?.getTopSellingProducts
            );

            if (contextData?.getTopSellingProducts) {
              try {
                console.log(
                  "üõçÔ∏è Llamando getTopSellingProducts con period: current"
                );
                // Temporal: intentar con diferentes per√≠odos para encontrar datos
                let topProducts = await contextData.getTopSellingProducts(
                  "current",
                  5
                );

                // Si no hay datos en el per√≠odo actual, intentar con per√≠odo anterior
                if (
                  !topProducts ||
                  !topProducts.topByQuantity ||
                  topProducts.topByQuantity.length === 0
                ) {
                  console.log(
                    "üõçÔ∏è No hay datos en per√≠odo actual, intentando per√≠odo anterior"
                  );
                  topProducts = await contextData.getTopSellingProducts(
                    "previous",
                    5
                  );
                }

                console.log(
                  "üõçÔ∏è Productos m√°s vendidos recibidos:",
                  topProducts
                );

                console.log("üõçÔ∏è Top products structure:", {
                  hasTopByQuantity: !!topProducts?.topByQuantity,
                  topByQuantityLength: topProducts?.topByQuantity?.length || 0,
                  period: topProducts?.period,
                  month: topProducts?.month,
                  year: topProducts?.year,
                  startDate: topProducts?.startDate,
                  endDate: topProducts?.endDate,
                  summary: topProducts?.summary,
                });

                console.log(
                  "üõçÔ∏è Full response details:",
                  JSON.stringify(topProducts, null, 2)
                );

                if (
                  topProducts &&
                  topProducts.topByQuantity &&
                  topProducts.topByQuantity.length > 0
                ) {
                  let productsList = topProducts.topByQuantity
                    .map(
                      (product: any, index: number) =>
                        `${index + 1}. **${
                          product.productName
                        }**\n   üì¶ Cantidad: ${
                          product.totalQuantitySold
                        } unidades\n   üí∞ Ingresos: $${product.totalRevenue.toLocaleString()}\n   üè∑Ô∏è Precio promedio: $${Math.round(
                          product.averagePrice
                        ).toLocaleString()}`
                    )
                    .join("\n\n");

                  responseContent =
                    `üèÜ **Top 5 Productos M√°s Vendidos - ${topProducts.month} ${topProducts.year}**\n\n` +
                    `${productsList}\n\n` +
                    `üìä **Resumen Total:**\n` +
                    `‚Ä¢ Total productos √∫nicos: ${topProducts.summary.totalProducts}\n` +
                    `‚Ä¢ Cantidad total vendida: ${topProducts.summary.totalQuantitySold} unidades\n` +
                    `‚Ä¢ Ingresos totales: $${topProducts.summary.totalRevenue.toLocaleString()}`;
                } else {
                  responseContent = `üìä No hay datos de productos vendidos disponibles para ${
                    topProducts?.month || "el per√≠odo actual"
                  } ${topProducts?.year || new Date().getFullYear()}.`;
                }
              } catch (error) {
                console.error(
                  "Error obteniendo productos m√°s vendidos:",
                  error
                );
                responseContent =
                  "‚ùå Error al obtener los productos m√°s vendidos.";
              }
            } else {
              console.log(
                "‚ùå getTopSellingProducts no est√° disponible en contextData"
              );
              responseContent =
                "‚ùå No hay datos de productos disponibles en este momento.";
            }
            break;
          case "deals-default-2":
            responseContent =
              "Consejos para cerrar m√°s ventas: 1) Haz seguimiento cada 3 d√≠as, 2) Personaliza cada propuesta, 3) Identifica el decision maker, 4) Crea urgencia genuina.";
            break;
          case "general-1":
            responseContent =
              "Tutoriales disponibles: Crear deals, Gestionar contactos, Configurar pipelines, Automatizaciones, Reportes avanzados.";
            break;
          case "general-2":
            responseContent =
              "Mejores pr√°cticas: 1) Actualiza datos regularmente, 2) Usa tags para organizar, 3) Configura automatizaciones, 4) Revisa m√©tricas semanalmente.";
            break;
          case "quick-help":
            responseContent = "Aqu√≠ tienes las opciones principales:";
            // Agregar botones espec√≠ficos para el men√∫
            addMessage(responseContent, "assistant", [
              {
                id: "general-1",
                text: "Ver tutoriales",
                type: "action",
                variant: "secondary",
              },
              {
                id: "general-2",
                text: "Mejores pr√°cticas",
                type: "action",
                variant: "secondary",
              },
              {
                id: "general-3",
                text: "Preguntar a GPT",
                type: "gpt",
                variant: "primary",
              },
            ]);
            setIsTyping(false);
            return; // Salir temprano para evitar el addMessage al final
          case "help-basic":
            responseContent =
              "Puedo ayudarte con informaci√≥n b√°sica sobre FusionCRM. ¬øQu√© necesitas saber espec√≠ficamente?";
            break;
          case "gpt-retry":
          case "gpt-continue":
            // Reactivar GPT
            setShowTextInput(true);
            setAwaitingGptResponse(true);
            responseContent =
              "Perfecto, ahora puedes escribir tu pregunta completa para GPT:";
            break;
          case "contact-default-1":
            // Calcular valor promedio desde el contexto
            if (contextData?.data?.deals) {
              const deals = contextData.data.deals;
              const total = deals.reduce(
                (sum: number, deal: any) => sum + (deal.amount || 0),
                0
              );
              const avg = total / deals.length;
              responseContent = `El valor promedio de compra es $${avg.toFixed(
                2
              )}. Calculado desde ${
                deals.length
              } deals con un total de $${total.toLocaleString()}.`;
            } else {
              responseContent =
                "No hay deals disponibles para calcular el valor promedio.";
            }
            break;
          case "contact-details-1":
            if (contextData?.data?.deals) {
              const deals = contextData.data.deals;
              const dealsList = deals
                .map(
                  (deal: any, index: number) =>
                    `${index + 1}. ${deal.title}: $${
                      deal.amount?.toLocaleString() || 0
                    } (${deal.status?.name || "Sin estado"})`
                )
                .join("\n");
              responseContent = `Detalles de deals:\n${dealsList}`;
            } else {
              responseContent = "No hay deals disponibles para mostrar.";
            }
            break;
          case "contact-analysis-1":
            if (contextData?.data) {
              const contact = contextData.data;
              const dealsCount = contact.deals?.length || 0;
              const totalValue =
                contact.deals?.reduce(
                  (sum: number, deal: any) => sum + (deal.amount || 0),
                  0
                ) || 0;
              responseContent = `Resumen de actividad:
              - Total de deals: ${dealsCount}
              - Valor total: $${totalValue.toLocaleString()}
              - Empresa: ${contact.companyName || "No especificada"}
              - Lead Score: ${contact.leadScore || "No calculado"}`;
            } else {
              responseContent = "No hay datos suficientes para el an√°lisis.";
            }
            break;
          case "contact-analysis-2":
            if (contextData?.data?.deals) {
              const deals = contextData.data.deals;
              const avgDeal =
                deals.length > 0
                  ? deals.reduce(
                      (sum: number, deal: any) => sum + (deal.amount || 0),
                      0
                    ) / deals.length
                  : 0;
              const potential = avgDeal * 2; // Estimaci√≥n simple
              responseContent = `Potencial de negocio estimado:
              - Valor promedio actual: $${avgDeal.toFixed(2)}
              - Potencial estimado: $${potential.toFixed(2)}
              - Recomendaci√≥n: ${
                avgDeal > 5000
                  ? "Cliente de alto valor, mantener relaci√≥n estrecha"
                  : "Oportunidad de crecimiento, considerar upselling"
              }`;
            } else {
              responseContent =
                "Sin deals hist√≥ricos, el potencial se basa en el perfil del contacto y la industria.";
            }
            break;
          default:
            responseContent =
              "Acci√≥n ejecutada correctamente. ¬øHay algo m√°s en lo que pueda ayudarte?";
        }

        addMessage(responseContent, "assistant", [
          {
            id: "follow-up-gpt",
            text: "Preguntar a GPT",
            type: "gpt",
            variant: "primary",
          },
        ]);
        setIsTyping(false);
      }, 1000);
    },
    [addMessage, contextData]
  );

  return {
    messages,
    isTyping,
    showTextInput,
    awaitingGptResponse,
    sendMessage,
    clearMessages,
    handleButtonClick,
    setShowTextInput,
    addMessage,
  };
};
